##########################################################
# This makefile fragment builds LMM/XMM/XMMC demo programs
#   
# To use it, define:
#  PROPLIB to be the path to this directory
#  NAME to be the name of project
#       - this is used to create the final program $(NAME).elf
#  OBJS to be the object files needed for the project
#  MODEL to lmm, xmm, or xmmc
#  CFLAGS to be desired CFLAGS
#
#  Then set up a default "all" target (normally this will be
#    all: $(NAME).elf
#  and finally
#    include $(PROPLIB)/demo.mk
#
# Copyright (c) 2011 Parallax Inc.
# All rights MIT licensed
##########################################################

# where we installed the propeller binaries and libraries
PREFIX = /opt/parallax

NAME=sdloader
MODEL=xmmc
BOARD=GAMEBLADE
BOARDFLAG=-b$(BOARD)
CFLAGS=-Os -Wall -mlmm
LDFLAGS += -m$(MODEL) $(CFLAGS) -fno-exceptions -fno-rtti

ifneq ($(LDSCRIPT),)
LDFLAGS += -T $(LDSCRIPT)
endif

# basic gnu tools
CC = propeller-elf-gcc
CXX = propeller-elf-g++
LD = propeller-elf-ld
AS = propeller-elf-as
AR = propeller-elf-ar
OBJCOPY = propeller-elf-objcopy
LOADER = propeller-load
ECHO=echo
MKDIR=mkdir -p
RM=rm

CXXFLAGS += $(CFLAGS)

# BSTC program
BSTC=bstc.linux
SPINDIR=./spin

ifneq ($(NAME),)
$(NAME).elf: $(OBJS)
	$(CC) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)
endif

ifneq ($(LIBNAME),)
lib$(LIBNAME).a: $(OBJS)
	$(AR) rs $@ $(OBJS)
endif

ifndef BUILDROOT
BUILDROOT=.
endif

SRCDIR=.
OBJDIR=$(BUILDROOT)/obj
DRVDIR=$(BUILDROOT)/build

DIRS = $(OBJDIR) $(DRVDIR)

HDRS=sd_loader.h fatread.h sdio.h pex.h

all:	$(DRVDIR)/sd_loader.elf

SDLOADER_OBJS=\
$(OBJDIR)/sd_loader.o \
$(OBJDIR)/fatread.o \
$(OBJDIR)/sdio.o \
$(OBJDIR)/vm_start.o

$(DRVDIR)/sd_loader.elf:	$(DRVDIR) $(SDLOADER_OBJS)
	$(CC) $(CFLAGS) -o $@ $(SDLOADER_OBJS)

$(OBJDIR)/%.o:	$(SRCDIR)/%.c $(OBJDIR) $(HDRS)
	$(CC) $(CFLAGS) -c $< -o $@
	@$(ECHO) $@

$(OBJDIR)/%.o:	$(SRCDIR)/%.S $(OBJDIR) $(HDRS)
	$(CC) $(CFLAGS) -c $< -o $@
	@$(ECHO) $@

$(DIRS):
	$(MKDIR) $@

# a .cog program is an object file that contains code intended to
# run in a COG separate from the main program; i.e., it's a COG
# driver that the linker will place in the .text section.
#
%.cog: %.c
	$(CC) $(CFLAGS) -r -mcog -o $@ $<
	$(OBJCOPY) --localize-text --rename-section .text=$@ $@

# a .ecog program is an object file that contains code intended to
# run in a COG separate from the main program; i.e., it's a COG
# driver that the linker will place in the .drivers section which
# gets loaded to high EEPROM space above 0x8000.
#

%.dat: $(SPINDIR)/%.spin
	$(BSTC) -Ox -c -o $(basename $@) $<

%_firmware.o: %.dat
	$(OBJCOPY) -I binary -B propeller -O $(CC) $< $@



.PHONY: clean
clean:
	@$(RM) -rf $(OBJDIR)
	@$(RM) -rf $(DRVDIR)

# how to run
#
run: $(NAME).elf
	$(LOADER) $(BOARDFLAG) $(NAME).elf -r -t
